#
# Default Bacula Director Configuration file
#
#  The only thing that MUST be changed is to add one or more
#   file or directory names in the Include directive of the
#   FileSet resource.
#
#  For Bacula release 9.0.6 (20 November 2017) -- ubuntu 18.04
#
#  You might also want to change the default email address
#   from root to your address.  See the "mail" and "operator"
#   directives in the Messages resour

Director {                            # define myself
  Name = BackupServerSS-dir
  DIRport = 9101                # where we listen for UA connections
  QueryFile = "/etc/bacula/scripts/query.sql"
  WorkingDirectory = "/var/lib/bacula"
  PidDirectory = "/run/bacula"
  Maximum Concurrent Jobs = 5
		# so could perform 1 backup per time
  Password = "K3lvMwvEUeywJM6uTatLq2RwiZ0up4pgk"         # Console password
  Messages = Daemon
  DirAddress = 10.10.0.3
  Description="BackupServerSS Director will backup your files :D"
  FD Connect Timeout = 1	#Director will continue trying to attempt a connection to a client
  SD Connect Timeout = 5	#Director "" to the Storage.
  
  TLS Enable = yes
  TLS Require = no
  TLS Certificate = /etc/ssl/certs/bacula_server.crt
  TLS CA Certificate File = /etc/ssl/certs/bacula_ca.crt
  TLS Key = /etc/ssl/private/bacula_server.key
}

JobDefs {
  Name = "DefaultJob"
  Type = Backup
  Level = Incremental
  Client = BackupServerSS-fd
  FileSet = "Full Set"
  Schedule = "WeeklyCycle"
  Storage = File1
  Messages = Standard
  Pool = File
  SpoolAttributes = yes
  Priority = 10
  Write Bootstrap = "/var/lib/bacula/%c.bsr"
}

JobDefs {
  Name = "EachServerJob"
  Type = Backup
  Level = Incremental 
  FileSet = "HomeFolder"
  Schedule = "Each30minutes"
  Storage = File2
  Messages = Standard
  Pool = File
  SpoolAttributes = yes
  Priority = 15
}

Job {
  Name = "BackupLocalFiles"
  JobDefs = "DefaultJob"
  #RunJob = 
}
Job {
  Name = "BackupLocalFilesU"
  Type = Backup
  Level = Incremental
  Storage = File1
  Messages = Standard
  Client = BackupServerSS-fd
  Pool = FileUnenc
  FileSet = "FilesTest"
}
FileSet {
  Name = "FilesTest"
  Include {
  	File = /home/backupadmin/
  }
}

Job {
  Name = "BackupGatewayServer"
  Client = BackupGatewayServer-fd
  JobDefs = "EachServerJob"

RescheduleOnError = yes
  Reschedule Interval =  5 minutes
  Reschedule Times = 2
# RunScript {
#    RunsWhen = Before
#    FailJobOnError = No
#    RunsOnClient = yes
#    Command = "echo '%d will stop Apache2 service in order to backup %c machine.'"
#    Command = "/etc/init.d/apache2 stop"
#    Command = "echo '%d stopped Apache2 service in  %c machine Succesfully'"
# }
 #RunScript {
 #   RunsWhen = After
 #   RunsOnFailure = yes
 #   RunsOnClient = yes
 #   Command = "echo '%d will start Apache2 service in order to backup %c machine.'"
 #   Command = "/etc/init.d/apache2 start"
 #   Command = "echo '%d started Apache2 service in  %c machine Succesfully'"
# }

}
Job {
  Name = "BackupWebServer"
  Client = BackupWebServer-fd
  JobDefs = "EachServerJob"
  RescheduleOnError = yes
  Reschedule Interval =  5 minutes
  Reschedule Times = 2
 #RunScript {
 #   RunsWhen = Before
 #   FailJobOnError = No
 #   RunsOnClient = yes
 #   Command = "%d will stop Apache2 service in order to backup %c machine."
 #   Command = "/etc/init.d/apache stop"
 #   Command = "%d stopped Apache2 service in  %c machine Succesfully"
 #}
 #RunScript {
 #   RunsWhen = After
 #   RunsOnFailure = yes
 #   RunsOnClient = yes
 #   Command = "%d will start Apache2 service in order to backup %c machine."
 #   Command = "/etc/init.d/apache start"
 #   Command = "%d started Apache2 service in  %c machine Succesfully"
 #}
 
}

Job {
  Name = "BackupMailServer"
  Client = BackupMailServer-fd
  JobDefs = "EachServerJob"
}

Job {
  Name = "BackupDNSServer"
  Client = BackupDNSServer-fd
  JobDefs = "EachServerJob"
}

Job {
  Name = "BackupDBServer"
  Client = BackupDBServer-fd
  JobDefs = "EachServerJob"
  #Same as run
}

Job {
  Name = "BackupFTPServer"
  Client = BackupFTPServer-fd
  JobDefs = "EachServerJob"
  #Same as run
  FileSet = "HomeFolder"
}

# Backup the catalog database (after the nightly save)
Job {
  Name = "BackupCatalog"
  JobDefs = "DefaultJob"
  Level = Full
  FileSet="Catalog"
  Schedule = "WeeklyCycleAfterBackup"
  # This creates an ASCII copy of the catalog
  # Arguments to make_catalog_backup.pl are:
  #  make_catalog_backup.pl <catalog-name>
  RunBeforeJob = "/etc/bacula/scripts/make_catalog_backup.pl MyCatalog"
  # This deletes the copy of the catalog
  RunAfterJob  = "/etc/bacula/scripts/delete_catalog_backup"
  Write Bootstrap = "/var/lib/bacula/%n.bsr"
  Priority = 11                   # run after main backup
}

#
# Standard Restore template, to be changed by Console program
#  Only one such job is needed for all Jobs/Clients/Storage ...
#
Job {
  Name = "RestoreFiles"
  Type = Restore
  Client=BackupServerSS-fd
  Storage = File1
# The FileSet and Pool directives are not used by Restore Jobs
# but must not be removed
  FileSet="Full Set"
  Pool = File
  Messages = Standard
  Where = /bacula/restore
}

#FileSet  {
#  Name = "Full SetW"
#  Include {
#   Options{
#     signature = MD5
#     compression = GZIP
#   }
#   File =  "C:\"
#  }
#}

# List of files to be backed up
FileSet {
  Name = "Full Set"
  Include {
    Options {
      signature = MD5
	compression = GZIP    
}
#
#  Put your list of files here, preceded by 'File =', one per line
#    or include an external list with:
#
#    File = <file-name
#
#  Note: / backs up everything on the root partition.
#    if you have other partitions such as /usr or /home
#    you will probably want to add them too.
#
#  By default this is defined to point to the Bacula binary
#    directory to give a reasonable FileSet to backup to
#    disk storage during initial testing.
#
    File = /
  }

#
# If you backup the root directory, the following two excluded
#   files can be useful
#
  Exclude {
    File = /var/lib/bacula
    File = /nonexistant/path/to/file/archive/dir
    File = /proc
    File = /tmp
    File = /sys
    File = /.journal
    File = /.fsck
    File = /bacula  
}
}

#
# When to do the backups, full backup on first sunday of the month,
#  differential (i.e. incremental since full) every other sunday,
#  and incremental backups other days
Schedule {
  Name = "WeeklyCycle"
  Run = Full 1st mon at 03:00
  Run = Differential 2nd-5th sun at 3:00
  Run = Incremental mon-sat at 03:00
}

# This schedule does the catalog. It starts after the WeeklyCycle
Schedule {
  Name = "WeeklyCycleAfterBackup"
  Run = Full sun-sat at 23:10
}
Schedule {
  Name = "Semanal"
  Run = Full 1st sun 01:00
  Run = Incremental mon-sat at 01:00
}

Schedule {
  Name = "Each30minutes"
  Run = hourly at 00:30
}

FileSet {
  Name = "HomeFolder"
  Include {
    Options{
      signature = SHA1
      compression = GZIP  
      checkfilechanges=yes	#if files are changed after backup throws an error.	
    }
    File = /home
   }
}

# This is the backup of the catalog
FileSet {
  Name = "Catalog"
  Include {
    Options {
      signature = MD5
    }
    File = "/var/lib/bacula/bacula.sql"
  }
}

# Client (File Services) to backup
Client {
  Name = BackupServerSS-fd
  Address = 10.10.0.3
  FDPort = 9102
  Catalog = MyCatalog
  Password = "oq2_zrFxSnZw_Hhcaw0B2jl1btQfeJIEt"          # password for FileDaemon
  File Retention = 60 days            # 60 days
  Job Retention = 6 months            # six months
  AutoPrune = yes                     # Prune expired Jobs/Files
}
Client {
  Name = BackupGatewayServer-fd
  Address = 10.10.0.2	# !!CHANGE IT !!
  FDPort = 9102
  Catalog = MyCatalog
  Password = "baculaadmin"   # !! CHANGE IT
  File Retention = 60 days            # 60 days
  Job Retention = 6 months            # six months
  AutoPrune = yes                     # Prune expired Jobs/Files
}
Client {
  Name = BackupWebServer-fd
  Address = 10.10.0.9    # !!CHANGE IT !!
  FDPort = 9102
  Catalog = MyCatalog
  Password = "baculaadmin"   # !! CHANGE IT
  File Retention = 60 days            # 60 days
  Job Retention = 6 months            # six months
  AutoPrune = yes                     # Prune expired Jobs/Files
  MaximumConcurrentJobs = 2
}
Client {
  Name = BackupMailServer-fd
  Address = 10.10.0.8    # !!CHANGE IT !!
  FDPort = 9102
  Catalog = MyCatalog
  Password = "baculaadmin"   # !! CHANGE IT
  File Retention = 60 days            # 60 days
  Job Retention = 6 months            # six months
  AutoPrune = yes                     # Prune expired Jobs/Files
}
Client {
  Name = BackupDNSServer-fd
  Address = 10.10.0.5    # !!CHANGE IT !!
  FDPort = 9102
  Catalog = MyCatalog
  Password = "baculadmin"   # !! CHANGE IT
  File Retention = 60 days            # 60 days
  Job Retention = 6 months            # six months
  AutoPrune = yes                     # Prune expired Jobs/Files
}
Client {
  Name = BackupFTPServer-fd
  Address = 10.10.0.6    # !!CHANGE IT !!
  FDPort = 9102
  Catalog = MyCatalog
  Password = "baculaadmin"   # !! CHANGE IT
  File Retention = 60 days            # 60 days
  Job Retention = 6 months            # six months
  AutoPrune = yes                     # Prune expired Jobs/Files
}
Client {
  Name = BackupDBServer-fd
  Address = 10.10.0.7    # !!CHANGE IT !!
  FDPort = 9102
  Catalog = MyCatalog
  Password = "baculaadmin"   # !! CHANGE IT
  File Retention = 60 days            # 60 days
  Job Retention = 6 months            # six months
  AutoPrune = yes                     # Prune expired Jobs/Files
}
# Definition of file Virtual Autochanger device
Autochanger {
  Name = File1
# Do not use "localhost" here
  Address = BackupServerSS                # N.B. Use a fully qualified name here
  SDPort = 9103
  Password = "dYYZopgqnHrCnCwkrXchQ326oDitA2qx6"
  Device = FileChgr1
  Media Type = File1
  Maximum Concurrent Jobs = 10        # run up to 10 jobs a the same time
  Autochanger = File1                 # point to ourself

   #TLS Enable = yes
   #TLS Require = yes
   #TLS Certificate = /etc/ssl/certs/bacula_server.crt
   #TLS CA Certificate File = /etc/ssl/certs/bacula_ca.crt
   #TLS Key = /etc/ssl/private/bacula_server.key
}

# Definition of a second file Virtual Autochanger device
#   Possibly pointing to a different disk drive
Autochanger {
  Name = File2
# Do not use "localhost" here
  Address = 10.10.0.3                # N.B. Use a fully qualified name here
  SDPort = 9103
  Password = "dYYZopgqnHrCnCwkrXchQ326oDitA2qx6"
  Device = FileChgr2
  Media Type = File2
  Autochanger = File2                 # point to ourself
  Maximum Concurrent Jobs = 10        # run up to 10 jobs a the same time
   #TLS Enable = yes
   #TLS Require = yes
   #TLS Certificate = /etc/ssl/certs/bacula_server.crt
   #TLS CA Certificate File = /etc/ssl/certs/bacula_ca.crt
   #TLS Key = /etc/ssl/private/bacula_server.key

}

# Definition of LTO-4 tape Autochanger device
#Autochanger {
#  Name = LTO-4
#  Do not use "localhost" here
#  Address = localhost               # N.B. Use a fully qualified name here
#  SDPort = 9103
#  Password = "dYYZopgqnHrCnCwkrXchQ326oDitA2qx6"         # password for Storage daemon
#  Device = LTO-4                     # must be same as Device in Storage daemon
#  Media Type = LTO-4                 # must be same as MediaType in Storage daemon
#  Autochanger = LTO-4                # enable for autochanger device
#  Maximum Concurrent Jobs = 10
#}

# Generic catalog service
Catalog {
  Name = MyCatalog
  dbname = "bacula"; DB Address = "localhost"; dbuser = "bacula"; dbpassword = "1234567"
}

# Reasonable message delivery -- send most everything to email address
#  and to the console
Messages {
  Name = Standard
#
# NOTE! If you send to two email or more email addresses, you will need
#  to replace the %r in the from field (-f part) with a single valid
#  email address in both the mailcommand and the operatorcommand.
#  What this does is, it sets the email address that emails would display
#  in the FROM field, which is by default the same email as they're being
#  sent to.  However, if you send email to more than one address, then
#  you'll have to set the FROM address manually, to a single address.
#  for example, a 'no-reply@mydomain.com', is better since that tends to
#  tell (most) people that its coming from an automated source.

#
  mailcommand = "/usr/sbin/bsmtp -h localhost -f \"\(Bacula\) \<%r\>\" -s \"Bacula: %t %e of %c %l\" %r"
  operatorcommand = "/usr/sbin/bsmtp -h localhost -f \"\(Bacula\) \<%r\>\" -s \"Bacula: Intervention needed for %j\" %r"
  mail = root = all, !skipped
  operator = root = mount
  console = all, !skipped, !saved
#
# WARNING! the following will create a file that you must cycle from
#          time to time as it will grow indefinitely. However, it will
#          also keep all your messages if they scroll off the console.
#
  append = "/var/log/bacula/bacula.log" = all, !skipped
  catalog = all
}


#
# Message delivery for daemon messages (no job).
Messages {
  Name = Daemon
  mailcommand = "/usr/sbin/bsmtp -h localhost -f \"\(Bacula\) \<%r\>\" -s \"Bacula daemon message\" %r"
  mail = root = all, !skipped
  console = all, !skipped, !saved
  append = "/var/log/bacula/bacula.log" = all, !skipped
}

# Default pool definition
Pool {
  Name = Default
  Pool Type = Backup
  Recycle = no                       # Bacula can automatically recycle Volumes
  AutoPrune = yes                     # Prune expired volumes
  Volume Retention = 365 days         # one year
  Maximum Volume Bytes = 5G          # Limit Volume size to something reasonable
  Maximum Volumes = 100               # Limit number of Volumes in Pool
  Maximum Volume Jobs = 1
}
Pool {
  Name = FileUnenc
  Pool Type = Backup
  Label Format = file-unenc
}

# File Pool definition
Pool {
  Name = File
  Pool Type = Backup
  Recycle = no                       # Bacula can automatically recycle Volumes
  AutoPrune = yes                     # Prune expired volumes
  Volume Retention = 365 days         # one year
  Maximum Volume Bytes = 1G          # Limit Volume size to something reasonable
  Maximum Volumes = 10               # Limit number of Volumes in Pool
  #Label Format = "Vol-"               # Auto label
  Label Format = VolumeSS-
}


# Scratch pool definition
Pool {
  Name = Scratch
  Pool Type = Backup
}

#
# Restricted console used by tray-monitor to get the status of the director
#
Console {
  Name = BackupServerSS-mon
  Password = "42wA-EaGnjsLg3BEBxiB9qMpQYNLfnUUx"
  CommandACL = status, .status
}
